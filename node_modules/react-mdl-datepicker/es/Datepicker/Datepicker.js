'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactMdl = require('react-mdl');

var _Calendar = require('../Calendar/Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DatePicker = function (_React$Component) {
    _inherits(DatePicker, _React$Component);

    function DatePicker(props) {
        _classCallCheck(this, DatePicker);

        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

        _this.state = {
            defaultDate: (0, _moment2.default)(),
            format: 'DD.MM.YYYY',
            showCalendar: false,
            selectedValue: null
        };
        return _this;
    }

    _createClass(DatePicker, [{
        key: 'toggleCalendar',
        value: function toggleCalendar() {
            var showCalendar = !this.state.showCalendar;

            this.setState({
                showCalendar: showCalendar
            });
        }
    }, {
        key: 'saveSelectedDate',
        value: function saveSelectedDate(value) {
            this.setState({
                selectedValue: value,
                showCalendar: false
            });
            this.props.onChange(value);
        }
    }, {
        key: 'render',
        value: function render() {
            var format = this.props.format || this.state.format;
            var defaultDate = (0, _moment2.default)(this.props.defaultDate) || this.state.defaultDate;
            var selectedValue = this.state.selectedValue;
            var value = selectedValue ? selectedValue.format(format) : defaultDate.format(format);
            var maxValue = this.props.maxDate;

            return _react2.default.createElement(
                _reactMdl.Textfield,
                {
                    className: this.props.className,
                    floatingLabel: this.props.floatingLabel,
                    label: this.props.label,
                    value: value,
                    onClick: this.toggleCalendar.bind(this),
                    onChange: this.props.onChange,
                    readOnly: true
                },
                _react2.default.createElement(_Calendar2.default, {
                    showCalendar: this.state.showCalendar,
                    value: selectedValue || defaultDate,
                    saveSelectedDate: this.saveSelectedDate.bind(this),
                    toggleCalendar: this.toggleCalendar.bind(this),
                    maxValue: maxValue
                })
            );
        }
    }]);

    return DatePicker;
}(_react2.default.Component);

exports.default = DatePicker;