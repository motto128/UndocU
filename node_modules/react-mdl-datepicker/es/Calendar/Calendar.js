'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMdl = require('react-mdl');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

require('./calendar.styl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Calendar = function (_React$Component) {
    _inherits(Calendar, _React$Component);

    function Calendar(props) {
        _classCallCheck(this, Calendar);

        var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));

        _this.state = {
            value: props.value,
            selectedValue: props.value,
            maxValue: props.maxValue
        };
        return _this;
    }

    _createClass(Calendar, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(props) {
            this.setState({
                value: props.value
            });
        }
    }, {
        key: 'getDayOfWeek',
        value: function getDayOfWeek() {
            var daysOfWeek = [];
            var startOfWeek = (0, _moment2.default)(this.state.value.valueOf()).startOf('week');
            for (var i = 0; i < 7; i++) {
                daysOfWeek.push({
                    id: startOfWeek.format('d'),
                    name: startOfWeek.format('dd')
                });
                startOfWeek.add(1, 'day');
            }

            return daysOfWeek;
        }
    }, {
        key: 'getDaysOfMonth',
        value: function getDaysOfMonth() {
            var daysOfMonth = [];
            var startOfMonth = (0, _moment2.default)(this.state.value.valueOf()).startOf('month');
            var endOfMonth = (0, _moment2.default)(this.state.value.valueOf()).endOf('month');

            while (startOfMonth.date() <= endOfMonth.date() && startOfMonth.month() === endOfMonth.month() && startOfMonth.year() === endOfMonth.year()) {
                var daysOfWeek = {};
                var endOfWeek = (0, _moment2.default)(startOfMonth.valueOf()).endOf('week');

                while (startOfMonth.dayOfYear() <= endOfWeek.dayOfYear() && startOfMonth.week() === endOfWeek.week() && startOfMonth.year() === endOfWeek.year() && startOfMonth.date() <= endOfMonth.date()) {
                    var dayClass = 'react-mdl-calendar-table__day';

                    if (startOfMonth.date() === this.state.selectedValue.date() && startOfMonth.month() === this.state.selectedValue.month()) {
                        dayClass = 'react-mdl-calendar-table__day selected-day';
                    }

                    if (this.state.maxValue && startOfMonth.valueOf() > this.state.maxValue.valueOf()) {
                        dayClass = dayClass + ' disable';
                    }

                    daysOfWeek[startOfMonth.format('d')] = _react2.default.createElement(
                        _reactMdl.Button,
                        { onClick: this.selectDate.bind(this, startOfMonth.valueOf()), className: dayClass },
                        startOfMonth.date()
                    );
                    startOfMonth.add(1, 'day');
                }

                if (startOfMonth.year() < endOfWeek.year()) {
                    var _dayClass = 'react-mdl-calendar-table__day';

                    if (startOfMonth.date() === this.state.selectedValue.date() && startOfMonth.month() === this.state.selectedValue.month()) {
                        _dayClass = 'react-mdl-calendar-table__day selected-day';
                    }

                    if (this.state.maxValue && startOfMonth.valueOf() > this.state.maxValue.valueOf()) {
                        _dayClass = _dayClass + ' disable';
                    }

                    while (startOfMonth.year() < endOfWeek.year()) {
                        daysOfWeek[startOfMonth.format('d')] = _react2.default.createElement(
                            _reactMdl.Button,
                            { onClick: this.selectDate.bind(this, startOfMonth.valueOf()), className: _dayClass },
                            startOfMonth.date()
                        );
                        startOfMonth.add(1, 'day');
                    }
                }
                daysOfMonth.push(daysOfWeek);
            }

            return daysOfMonth;
        }
    }, {
        key: 'selectDate',
        value: function selectDate(date) {
            var selectedValue = (0, _moment2.default)(date);
            this.setState({
                selectedValue: selectedValue
            });
        }
    }, {
        key: 'nextMonth',
        value: function nextMonth() {
            var value = (0, _moment2.default)(this.state.value.valueOf());
            this.setState({
                value: value.add(1, 'month')
            });
        }
    }, {
        key: 'prevMonth',
        value: function prevMonth() {
            var value = (0, _moment2.default)(this.state.value.valueOf());
            this.setState({
                value: value.subtract(1, 'month')
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var showCalendar = this.props.showCalendar;
            var titleValue = this.state.value.format('MMMM YYYY');
            var daysOfWeek = this.getDayOfWeek();
            var daysOfMonth = this.getDaysOfMonth();

            if (showCalendar) {
                return _react2.default.createElement(
                    _reactMdl.Card,
                    { shadow: 0, className: 'react-mdl-calendar' },
                    _react2.default.createElement(
                        _reactMdl.CardTitle,
                        { className: 'react-mdl-calendar-title' },
                        _react2.default.createElement(_reactMdl.IconButton, {
                            className: 'react-mdl-calendar-title__control',
                            name: 'chevron_left',
                            onClick: this.prevMonth.bind(this)
                        }),
                        _react2.default.createElement(
                            'span',
                            { className: 'react-mdl-calendar-title__date' },
                            titleValue
                        ),
                        _react2.default.createElement(_reactMdl.IconButton, {
                            className: 'react-mdl-calendar-title__control',
                            name: 'chevron_right',
                            onClick: this.nextMonth.bind(this)
                        })
                    ),
                    _react2.default.createElement(
                        _reactMdl.CardText,
                        null,
                        _react2.default.createElement(
                            _reactMdl.DataTable,
                            {
                                rows: daysOfMonth.map(function (item) {
                                    return item;
                                }),
                                className: 'react-mdl-calendar-table'
                            },
                            daysOfWeek.map(function (day) {
                                return _react2.default.createElement(
                                    _reactMdl.TableHeader,
                                    {
                                        className: 'react-mdl-calendar-table__head',
                                        key: day.id,
                                        name: day.id
                                    },
                                    day.name
                                );
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactMdl.CardActions,
                        { border: true, className: 'react-mdl-calendar-footer' },
                        _react2.default.createElement(
                            _reactMdl.Button,
                            {
                                onClick: this.props.toggleCalendar,
                                raised: true, ripple: true,
                                className: 'react-mdl-calendar-footer__control link-button link-button__black'
                            },
                            '\u041E\u0442\u043C\u0435\u043D\u0430'
                        ),
                        _react2.default.createElement(
                            _reactMdl.Button,
                            {
                                onClick: this.props.saveSelectedDate.bind(null, this.state.selectedValue),
                                raised: true, ripple: true,
                                className: 'react-mdl-calendar-footer__control link-button link-button__black'
                            },
                            '\u041E\u041A'
                        )
                    )
                );
            }

            return _react2.default.createElement('div', null);
        }
    }]);

    return Calendar;
}(_react2.default.Component);

exports.default = Calendar;